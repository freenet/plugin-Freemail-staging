<?xml version="1.0"?>
<project name="Freemail" default="dist" basedir=".">
	<!-- set global properties for this build -->
	<property name="src" location="src"/>
	<property name="build" location="build"/>
	<property name="lib" location="lib"/>
	<property name="dist" location="dist"/>
	<property name="deps" location="deps"/>
	<property name="version.src" value="freemail/Version.java"/>
	<property name="version.build" value="freemail/Version.class"/>
	
	<property name="bcdist" value="lcrypto-jdk14-138"/>
	<property name="freenet-cvs-snapshot.location" location="../fred/dist/freenet.jar"/>

	<exec executable="git"
		failifexecutionfails="false"
		errorProperty="git.errror"
		outputproperty="git.describe"
		resultproperty="git.result">
		<arg value="describe" />
		<arg value="--always" />
		<arg value="--abbrev=1" />
		<arg value="--dirty" />
	</exec>

	<condition property="git.revision" value="${git.describe}" else="@unknown@">
		<and>
			<equals arg1="${git.result}" arg2="0" />
			<isset property="git.describe" />
		</and>
	</condition>

	<target name="bouncycastle-check">
		<available file="${deps}/${bcdist}" property="bouncycastle-dist.present" />
		<available file="${build}/org/bouncycastle" property="bouncycastle-bin.present" />
	</target>

	<target name="bouncycastle-fetch" depends="bouncycastle-check" unless="bouncycastle-dist.present">
		<mkdir dir="${deps}" />
		<get src="http://www.bouncycastle.org/download/${bcdist}.zip" 
		dest="${deps}/${bcdist}.zip" 
		verbose="true"
		usetimestamp="true" />

		<unzip src="${deps}/${bcdist}.zip" dest="${deps}" />
	</target>

	<target name="bouncycastle-compile" depends="bouncycastle-fetch" unless="bouncycastle-bin.present">
		<mkdir dir="build" />
		<javac srcdir="${deps}/${bcdist}/src" destdir="${build}" debug="on" optimize="on" source="1.6" target="1.6" nowarn="true">
			<exclude name="**/test/*" />
			<exclude name="org/bouncycastle/util/IPTest.java" />
			<exclude name="org/bouncycastle/util/AllTests.java" />
		</javac>
	</target>

	<target name="compile" depends="bouncycastle-compile">
		<mkdir dir="${build}"/>

		<tstamp/>

		<!-- Create the Version file with patched revision number in ${build} -->
		<copy file="${src}/${version.src}" tofile="${build}/${version.src}" overwrite="true" />
		<delete file="${build}/${version.build}" quiet="true" />
		<replace file="${build}/${version.src}">
			<replacefilter token="@custom@" value="${git.revision}"/>
		</replace>
		<echo message="Updated build version to ${git.revision} in ${build}/${version.src}"/>

		<!-- Compile the patched version file -->
		<javac srcdir="${build}" destdir="${build}" debug="on" optimize="on" source="1.6" target="1.6">
			<include name="${version.src}"/>
		</javac>
		
		<!-- Bundle the whole lot together, unless anyone whinges.
		     It makes it much easier to run -->
		<javac srcdir="${src}" destdir="${build}" debug="on" optimize="on" source="1.6" target="1.6">
			<classpath>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement location="${lib}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
		</javac>
		<copy todir="${build}/freemailgui/text">
			<fileset dir="${src}/freemailgui/text" />
		</copy>
		<copy todir="${build}/freemailgui/images">
			<fileset dir="${src}/freemailgui/images" />
	       </copy>
	</target>


	<target name="dist" depends="compile">
		<mkdir dir="${dist}"/>
		<jar jarfile="${dist}/Freemail.jar" basedir="${build}">
			<manifest>
				<attribute name="Main-Class" value="freemail.FreemailCli"/>
				<attribute name="Plugin-Main-Class" value="freemail.FreemailPlugin"/>
				<attribute name="Built-By" value="${user.name}"/>
				<section name="common">
					<attribute name="Implementation-Title" value="Freemail"/>
					<attribute name="Implementation-Version" value="0.0"/> 
					<attribute name="Implementation-Vendor" value="Dave Baker"/>
				</section>
			</manifest>
		</jar>    
	</target>

	<target name="clean">
		<delete includeEmptyDirs="true">
			<fileset dir="${build}">
				<exclude name="org/bouncycastle/**"/>
			</fileset>
		</delete>
		<delete dir="${dist}"/>
	</target>

	<target name="cleaner">
		<delete dir="${build}"/>
	</target>

	<target name="squeakyclean" depends="cleaner">
		<delete dir="${deps}"/>
	</target>

	<target name="distclean" description="Delete everything and restore to the original state.">
		<delete dir="${build}"/>
		<delete dir="${lib}"/>
		<delete dir="${deps}"/>
	</target>
</project>
