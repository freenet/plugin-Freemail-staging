#!/bin/bash
set -e

usage() {
	cat <<EOM
USAGE: $0 [options] <commit> <commit>
       $0 [options] [<commit>]

    Checks for differences in style warnings and unit test failures between the
    two commits. The second form is shorthand for <commit>^ <commit>, and uses
    HEAD if the commit is missing.

    --quiet    - suppress non-error messages
    --verbose  - print added/removed count even when no warnings are added
    <commit>   - the two commits that should be compared, see gitrevisions(7)
                 for ways to specify commits
EOM
	exit 1
}

COMMIT1=""
COMMIT2=""

for arg in "$@"; do
	if [[ "$arg" = --* ]]; then
		if [[ "$arg" == "--quiet" ]]; then
			QUIET="true"
			VERBOSE=""
		elif [[ "$arg" == "--verbose" ]]; then
			VERBOSE="true"
			QUIET=""
		else
			echo "`basename $0`: unrecognized option '$arg'"
			usage
		fi
	elif [[ -z "$COMMIT1" ]]; then
		COMMIT1="$arg"
	elif [[ -z "$COMMIT2" ]]; then
		COMMIT2="$arg"
	else
		echo "`basename $0`: Extra argument $arg"
		usage
	fi
done

#Abort if the working directory isn't clean
if [[ -n "$(git status --porcelain)" ]]; then
	echo "`basename $0`: Aborting due to dirty working directory"
	exit 1;
fi

#Find the two commits we should test
if [[ -z "$COMMIT1" && -z "$COMMIT2" ]]; then
	#No commits, test HEAD^..HEAD
	FROM="HEAD^"
	TO="HEAD"
elif [[ -n "$COMMIT1" && -z "$COMMIT2" ]]; then
	#One commit, test $COMMIT1^..$COMMIT1
	FROM="$COMMIT1^"
	TO="$COMMIT1"
else
	#Two commits, test $COMMIT1..$COMMIT2
	FROM="$COMMIT1"
	TO="$COMMIT2"
fi
FROM=`git describe --always $FROM`
TO=`git describe --always $TO`

#Checkout the parent of the target
git checkout "$FROM" &> /dev/null
mkdir -p .checkcommit.prev
set +e
ant clean &> /dev/null
if ! ant checkstyle unit &> .checkcommit.prev/build; then
	echo "Failed while building $FROM"
	exit 1
fi
grep "\[cs:checkstyle\] " .checkcommit.prev/build | tail -n +2 | sort > .checkcommit.prev/checkstyle
grep "\[junit\] Testcase: .*\(FAILED\|ERROR\)" .checkcommit.prev/build | sort > .checkcommit.prev/junit
set -e

#Checkout the target
git checkout "$TO" &> /dev/null
mkdir -p .checkcommit.cur
set +e
ant clean &> /dev/null
if ! ant checkstyle unit &> .checkcommit.cur/build; then
	echo "Failed while building $TO"
	exit 1
fi
grep "\[cs:checkstyle\] " .checkcommit.cur/build | tail -n +2 | sort > .checkcommit.cur/checkstyle
grep "\[junit\] Testcase: .*\(FAILED\|ERROR\)" .checkcommit.cur/build | sort > .checkcommit.cur/junit
set -e

#Count differences
ADDED=`diff -u .checkcommit.prev .checkcommit.cur | tail -n+3 | grep "^+" | wc -l`
REMOVED=`diff -u .checkcommit.prev .checkcommit.cur | tail -n+3 | grep "^-" | wc -l`

#Count the Checkstyle warnings
CHECKSTYLE_ADDED=`diff -u .checkcommit.prev/checkstyle .checkcommit.cur/checkstyle | tail -n+3 | grep "^+" | wc -l`
CHECKSTYLE_REMOVED=`diff -u .checkcommit.prev/checkstyle .checkcommit.cur/checkstyle | tail -n+3 | grep "^-" | wc -l`
if [[ ! $QUIET ]]; then
	if [[ $CHECKSTYLE_ADDED -gt 0 || $VERBOSE ]]; then
		#Print any new warnings and the count
		set +e
		if [[ $VERBOSE ]]; then
			diff -u .checkcommit.prev/checkstyle .checkcommit.cur/checkstyle | tail -n+3 | grep "^-"
		fi
		#TODO: Remove the initial +
		diff -u .checkcommit.prev/checkstyle .checkcommit.cur/checkstyle | tail -n+3 | grep "^+"
		set -e
		echo "$FROM..$TO: $CHECKSTYLE_ADDED warnings added, $CHECKSTYLE_REMOVED removed"
	fi
fi

#Count the jUnit test failures
JUNIT_ADDED=`diff -u .checkcommit.prev/junit .checkcommit.cur/junit | tail -n+3 | grep "^+" | wc -l`
JUNIT_REMOVED=`diff -u .checkcommit.prev/junit .checkcommit.cur/junit | tail -n+3 | grep "^-" | wc -l`
if [[ ! $QUIET ]]; then
	if [[ $JUNIT_ADDED -gt 0 || $VERBOSE ]]; then
		#Print any new failures and the count
		set +e
		if [[ $VERBOSE ]]; then
			diff -u .checkcommit.prev/junit .checkcommit.cur/junit | tail -n+3 | grep "^-"
		fi
		#TODO: Remove the initial +
		diff -u .checkcommit.prev/junit .checkcommit.cur/junit | tail -n+3 | grep "^+"
		set -e
		echo "$FROM..$TO: $JUNIT_ADDED new failures, $JUNIT_REMOVED failures fixed"
	fi
fi

#Cleanup
rm -fr .checkcommit.prev/ .checkcommit.cur/

#Exit with failure if warnings were added
if [[ $CHECKSTYLE_ADDED == "0" && $JUNIT_ADDED == "0" ]]; then
	exit 0
else
	exit 1
fi
